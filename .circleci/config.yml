version: 2
orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.3.0

jobs:
  build_and_deploy:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: circleci/openjdk:8-jdk-stretch
      - image: circleci/postgres:9.6.3-alpine
      - image: circleci/node:6.10
      - image: circleci/python:3-node
    environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test

    steps:

      # --------------------------------------------------------------------------
      # ms_service
      - checkout

      - restore_cache:
          key: ms-booking-{{ checksum "/BackEnd/ms_service/ms_service/pom.xml" }}

      - run: mvn dependency:go-offline
          working_directory: ~/project/BackEnd/ms_service/ms_service

      - save_cache:
          paths:
            - ~/.m2
          key: ms-booking-{{ checksum "/BackEnd/ms_service/ms_service/pom.xml" }}

      - run: mvn package
          working_directory: ~/project/BackEnd/ms_service/ms_service

      - store_test_results:
          path: ~/project/BackEnd/ms_service/ms_service/target/surefire-reports

      - store_artifacts:
          #path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
          path: ~/project/BackEnd/ms_service/ms_service/target/ms_service-0.0.1-SNAPSHOT.jar


        # --------------------------------------------------------------------------
        # ms_booking

        - restore_cache:
            key: ms-booking-{{ checksum "/BackEnd/ms_bookings/pom.xml" }}

        - run: mvn dependency:go-offline
            working_directory: ~/project/BackEnd/ms_bookings

        - save_cache:
            paths:
              - ~/.m2
            key: ms-booking-{{ checksum "/BackEnd/ms_bookings/pom.xml" }}

        - run: mvn package
            working_directory: ~/project/BackEnd/ms_bookings

        - store_test_results:
            path: ~/project/BackEnd/ms_bookings/target/surefire-reports

        - store_artifacts:
            #path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
            path: ~/project/BackEnd/ms_bookings/target/ms_booking-0.0.1-SNAPSHOT.jar


        # --------------------------------------------------------------------------
        # ms-availability
        - restore_cache:
            key: ms-booking-{{ checksum "/BackEnd/ms-availability/pom.xml" }}

        - run: mvn dependency:go-offline
            working_directory: ~/project/BackEnd/ms-availability

        - save_cache:
            paths:
              - ~/.m2
            key: ms-booking-{{ checksum "/BackEnd/ms-availability/pom.xml" }}

        - run: mvn package
            working_directory: ~/project/BackEnd/ms-availability

        - store_test_results:
            path: ~/project/BackEnd/ms-availability/target/surefire-reports

        - store_artifacts:
            #path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
            path: ~/project/BackEnd/ms-availability/target/ms-availability-0.0.1-SNAPSHOT.jar


        # --------------------------------------------------------------------------
        # ms-profiles

        - restore_cache:
            key: ms-booking-{{ checksum "/BackEnd/ms_profiles/pom.xml" }}

        - run: mvn dependency:go-offline
            working_directory: ~/project/BackEnd/ms_profiles

        - save_cache:
            paths:
              - ~/.m2
            key: ms-booking-{{ checksum "/BackEnd/ms_profiles/pom.xml" }}

        - run: mvn package
            working_directory: ~/project/BackEnd/ms_profiles

        - store_test_results:
            path: ~/project/BackEnd/ms_profiles/target/surefire-reports

        - store_artifacts:
            #path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
            path: ~/project/BackEnd/ms_profiles/target/ms_profiles-0.0.1-SNAPSHOT.jar


      # --------------------------------------------------------------------------
      # Yarn + npm installation

        - run:
            name: "Update Node.js and npm + install yarn"
            command: |
              curl -sSL "https://nodejs.org/dist/v11.10.0/node-v11.10.0-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v11.10.0-linux-x64/bin/node
              curl https://www.npmjs.com/install.sh | sudo bash
              curl -o- -L https://yarnpkg.com/install.sh | bash


      # --------------------------------------------------------------------------
      # FrontEnd integration testing

        - run :
            name: Front end - npm runtest
            command: npm install
            shell: /bin/bash
            working_directory: ~/project/FrontEnd

        - run :
            name: Front end - npm runtest
            command: npm run test
            shell: /bin/bash
            working_directory: ~/project/FrontEnd


      # --------------------------------------------------------------------------
      # BackEnd integration testing

        - run:
            name: Back End - ms_profile unit testing
            command: mvn test
            shell: /bin/bash
            working_directory: ~/project/BackEnd/ms_profiles

        - run:
            name: Back End - ms_bookings unit testing
            command: mvn test
            shell: /bin/bash
            working_directory: ~/project/BackEnd/ms_bookings

        - run:
            name: Back End - ms_service unit testing
            command: mvn test
            shell: /bin/bash
            working_directory: ~/project/BackEnd/ms_service/ms_service

          - run:
              name: Back End - ms_availability unit testing
              command: mvn test
              shell: /bin/bash
              working_directory: ~/project/BackEnd/ms_availability


        # --------------------------------------------------------------------------
        #  AWS ECR
          - run:
              name: Install dependencies for AWS
              command: |
                sudo apt-get update
                sudo apt-get -y -qq install awscli
                sudo apt-get install python3-pip
                sudo pip3 install --upgrade awscli

          - run:
              name: Build ms-service
              command: |
                docker build -t ms-service-image .
              working_directory: ~/project/BackEnd/ms_service/ms_service

          - run:
              name: Push ms-service
              command: |
                aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 594973024332.dkr.ecr.us-east-1.amazonaws.com
                docker push ms-service-image
              working_directory: ~/project/BackEnd/ms_service/ms_service

            - run:
                name: Build ms-profiles
                command: |
                  docker build -t ms-service-image .
                working_directory: ~/project/BackEnd/ms_profiles

            - run:
                name: Push ms-profiles
                command: |
                  aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 594973024332.dkr.ecr.us-east-1.amazonaws.com
                  docker push $FULL_IMAGE_NAME
                working_directory: ~/project/BackEnd/ms_profiles

            - run:
                name: Build image ms-bookings
                command: |
                  docker build -t ms-bookings-image .
                working_directory: ~/project/BackEnd/ms_bookings

            - run:
                name: Push ms-bookings
                command: |
                  aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 594973024332.dkr.ecr.us-east-1.amazonaws.com
                  docker push $FULL_IMAGE_NAME
                working_directory: ~/project/BackEnd/ms_bookings

            - run:
                name: Build ms-availability
                command: |
                  docker build -t ms-service-image .
                working_directory: ~/project/BackEnd/ms-availability

            - run:
                name: Push ms-availability
                command: |
                  aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 594973024332.dkr.ecr.us-east-1.amazonaws.com
                  docker push $FULL_IMAGE_NAME
                working_directory: ~/project/BackEnd/ms-availability

workflows:
  build-deploy-qa:
    jobs:
      - build_and_deploy:
          filters:
            branches:
              only: feature/circleci-2